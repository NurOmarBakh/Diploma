import os
from backend.utils import get_relevant_chunks
from llm.model import generate_answer
from datetime import datetime


def log_interaction(question, answer):
    os.makedirs("logs", exist_ok=True)
    with open("logs/interactions.log", "a", encoding="utf-8") as log:
        log.write(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}]\nQ: {question}\nA: {answer}\n\n")


def build_prompt(context, question):
    # Фиксированный блок с информацией об университете
    fixed_info = (
        "**Основная информация об Astana IT University:**\n"
        "- Дата основания: 2019 год\n"
        "- Специализация: IT и цифровые технологии\n"
        "- Программы: бакалавриат (3 года, на английском), магистратура, докторантура\n"
        "- какие подготовить документы: копию удостоверения личности, медицинскую справку №075 с флюорографией, вакцинный сертификат №063, фотографии 3×4 (6 шт.), оригинал диплома или приложения, сертификат ЕНТ, сертификат о гранте (если есть), результаты теста AITU, чек на оплату (для платного обучения).\n"
        "- Контакты: Проспект Мәңгілік Ел 55/11, Астана; +7 (7172) 645710; info@astanait.edu.kz\n\n"
    )
    # Если контекст пустой, заставляем LLM сообщить о его отсутствии
    if not context.strip():
        context = "В предоставленной информации отсутствуют данные по запросу."
    system_prompt = (
        """
            Ты опытный консультант и специалист по решению проблем, перед вами стоит задача ответить на любой вопрос об Astana IT University.
            Отвечай на вопросы об Astana IT University просто и понятно, используя только факты из базы знаний.
            Сформулируй исчерпывающий и информативный ответ из 80 слов или менее на заданный вопрос, основываясь исключительно на предоставленных результатах поиска. 
            Вы должны использовать только информацию из предоставленных результатов поиска. Используйте непредвзятый и журналистский тон. 
            Объедините результаты поиска в связный ответ. Не повторяй ранее написанный текст. Приводите только самые подходящие результаты, которые точно отвечают на вопрос. 
            Если разные результаты относятся к разным объектам с одним и тем же именем, напишите отдельные ответы для каждого объекта.
            
            Если в контексте нет ничего, что имело бы отношение к данному вопросу, просто скажите "Хм..., я не уверен". Не пытайтесь придумать ответ.
            ПОМНИТЕ: если в контексте нет соответствующей информации, просто скажите "Хм, я не уверен". Не пытайтесь придумать ответ.
        """
    )
    return f"{system_prompt}{fixed_info}Контекст:\n{context}\n\nВопрос: {question}\nОтвет:"

def answer_question(question: str) -> str:
    top_k = 15
    chunks = get_relevant_chunks(question, k=top_k)
    context = "\n".join(chunks).strip()

    if not context:
        answer = "В предоставленной информации отсутствуют данные по запросу."
        log_interaction(question, answer)
        return answer

    prompt = build_prompt(context, question)
    answer = generate_answer(prompt)
    log_interaction(question, answer)
    return answer
